<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeReading | 三余无梦]]></title>
  <link href="http://zs1621.github.io/blog/categories/codereading/atom.xml" rel="self"/>
  <link href="http://zs1621.github.io/"/>
  <updated>2014-05-26T15:17:07+08:00</updated>
  <id>http://zs1621.github.io/</id>
  <author>
    <name><![CDATA[admin]]></name>
    <email><![CDATA[zs1213yh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node-thunkify Code Reading]]></title>
    <link href="http://zs1621.github.io/blog/2014/05/21/node-thunkify-code-reading/"/>
    <updated>2014-05-21T12:02:00+08:00</updated>
    <id>http://zs1621.github.io/blog/2014/05/21/node-thunkify-code-reading</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/visionmedia/node-thunkify">thunkify</a></h2>

<h2>code</h2>

<p>```
function thunkify(fn) {</p>

<pre><code>assert('function' == typeof fn, 'function required');    

return function () {
    var args = slice.call(arguments);    
    var ctx = this;
    return function (done) {   // done 是回调函数
        var called;
        args.push(function() {
            if (called) return;
            called = true;    
            done.apply(null, arguments); 
        }); // 将回调处理加入参数列表

        try {
            fn.apply(ctx, args);   // 函数处理 
        } catch (err) {
            done(err);   // 异常获取并用回调处理 
        }
    }
}
</code></pre>

<p>};
```</p>

<h2>例子</h2>

<p>```
var thunkify = require(&lsquo;thunkify&rsquo;);
var fs = require(&lsquo;fs&rsquo;);</p>

<p>var read = thunkify(fs.readFile);</p>

<p>read(&lsquo;package.json&rsquo;, &lsquo;utf8&rsquo;)(function(err, str){
});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koa.js Code Reading]]></title>
    <link href="http://zs1621.github.io/blog/2014/01/17/koa-dot-js-code-reading/"/>
    <updated>2014-01-17T15:23:00+08:00</updated>
    <id>http://zs1621.github.io/blog/2014/01/17/koa-dot-js-code-reading</id>
    <content type="html"><![CDATA[<p>TBC 继续挖坑待填&hellip;</p>

<h2><a href="https://github.com/koajs/koa">Koa</a></h2>

<p>源码简况</p>

<ul>
<li>version： 0.6.0</li>
<li>用到的库

<ul>
<li>escape-html: =1.0.1</li>
<li>statuses: =1.0.1</li>
<li>accepts: 1.0.0</li>
<li>type-is: 1.1.0</li>
<li>set-type: 1.0.0</li>
<li>finished: 1.1.1</li>
<li>co: 3.0.2</li>
<li>debug</li>
<li>fresh: 0.2.1</li>
<li>koa-compose: 2.2.0</li>
<li>koa-is-json: 1.0.0</li>
<li>cookies: 0.4.0</li>
<li><a href="https://github.com/visionmedia/node-delegates/blob/master/index.js">delegates</a>: 0.0.3 -已读 -13/5</li>
<li>dethroy: 1.0.0</li>
<li>error-inject: 1.0.0</li>
<li><a href="https://github.com/visionmedia/node-only">only</a>: 0.0.2  -已读 -9/5</li>
</ul>
</li>
<li>运行条件: node 版本大于0.11.9</li>
</ul>


<h2><strong>从入口说起</strong></h2>

<p>```
var koa = require(&lsquo;koa&rsquo;);
var app = koa();</p>

<p>app.use(function *(){</p>

<pre><code>this.body = 'Hello World';    
</code></pre>

<p>});</p>

<p>app.listen(3000);
```</p>

<p>上面是一个最简单的服务,输出<code>Hello World</code>; 我们用到两个koa的api</p>

<ul>
<li>app.use()</li>
<li>app.listen();</li>
</ul>


<p>下面就先从app.listen() 开始</p>

<p>看 <a href="https://github.com/koajs/koa/blob/master/lib/application.js">application.js</a></p>

<p>```
app.listen = function () {</p>

<pre><code>var server = http.createServer(this.callback()) ;  
return server.listen.apply(server, arguments);
</code></pre>

<p>}
```</p>

<blockquote><p>http.createServer([requestListener])
 returns a new web server object</p>

<p><code>requestListener</code> is a function which is automatically added to the <code>'request'</code> 事件</p></blockquote>

<p>由代码可以知道 this.callback() 就是一个 <code>requestListener</code>;</p>

<p>TBC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[underscore.js Code Reading]]></title>
    <link href="http://zs1621.github.io/blog/2013/12/27/underscore-dot-js-code-reading/"/>
    <updated>2013-12-27T21:14:00+08:00</updated>
    <id>http://zs1621.github.io/blog/2013/12/27/underscore-dot-js-code-reading</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js">underscore</a></h3>

<p>挖坑待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy.js code Reading]]></title>
    <link href="http://zs1621.github.io/blog/2013/12/18/lazy-dot-js-code-reading/"/>
    <updated>2013-12-18T08:58:00+08:00</updated>
    <id>http://zs1621.github.io/blog/2013/12/18/lazy-dot-js-code-reading</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/dtao/lazy.js">Lazy.js</a></h3>

<p>在看源码前， 可以先看下Lazy.js的基本思想 <a href="https://github.com/zs1621/lazy.js/wiki/%E4%BB%8B%E7%BB%8D-LAZYJS(%E7%BF%BB%E8%AF%91">Lazy.js 的设计模式</a>)</p>

<h3>Lazy</h3>

<p><code>javascript
Lazy([1, 2, 4]) // in [1, 2, 4] -&gt; out instanceof Lazy.ArrayLikeSequence
Lazy({ a: 'b'})
Lazy("hello world")
Lazy()
Lazy(null)
</code></p>

<ul>
<li>输入参数 Array | object | string |  | null</li>
<li>输出 { source: [1, 2, 4] } | { source: {&lsquo;a&rsquo;: b} } | { source: &ldquo;hello world&rdquo;} | { source: undefined }  | { source: null }</li>
<li>可以看到输入的参数被打包成相应的对象, 而这些对象都继承自 <code>sequence</code></li>
</ul>


<h3>Sequence</h3>

<p><code>sequence</code> 对象提供对 0或者更多连续元素的集合 的统一的 API 封装.为什么所有的操作需要一个 sequence. 看下面的例子</p>

<p>```javascript
var seq = Lazy(source) // 1st sequence</p>

<pre><code>    .map(func) // 2nd MappedSequence
   .filter(pred) // 3rd FilteredSequence
    .reverse() // 4th ReversedSequence
</code></pre>

<p>seq.each(function(x) { console.log(x); })
```</p>

<p>上面这个例子中 前四步除了创建对应的sequece没有做任何的遍历source或者别的操作。 只有在第5步调用 each 时，将一次性按照鍊條(chain)的順序处理source 得到最后的结果。所以lazy做的就是延迟遍历处理数据.</p>

<blockquote><p>in fact, when i think about  the performance of <code>underscore</code> and <code>lazy.js</code>; i cann&rsquo;t understand why lazy is faster.  lazy.js: 1 2s 3 underscore: 1 2 3 1 2 3 1 2 3 . so what&rsquo;s the difference. lazy.js just hold off some process; i cann&rsquo;t get it&hellip;. so continue to read code. >_&lt;</p></blockquote>

<p>```javascript
function Sequence() {} # 创建Sequence构造函数</p>

<p>```</p>

<p>TBC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generic-pool Reading]]></title>
    <link href="http://zs1621.github.io/blog/2013/12/07/generic-pool-reading/"/>
    <updated>2013-12-07T02:00:00+08:00</updated>
    <id>http://zs1621.github.io/blog/2013/12/07/generic-pool-reading</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/coopernurse/node-pool">node-pool</a></h2>

<h3>why pool</h3>

<ul>
<li>与数据建立连接关闭连接， 每次建立一个连接对象会有消耗!(在并发很高的情况消耗会更明显)</li>
</ul>


<h3>what node-pool can do ?</h3>

<ul>
<li>动态调整连接数的连接池, 数据库频繁读写时, 就建多个连接, 当然连接数有最大值Max, 如果读写实际需要的连接数 > Max 那么加入队列里;如果数据库读写空闲，就释放多余的连接;</li>
</ul>


<h3>how node-pool do that ? &ndash;> Code Reading</h3>

<ul>
<li>栗子</li>
</ul>


<script src="https://gist.github.com/zs1621/7836578.js"></script>


<p>运行上面的例子</p>

<ol>
<li>新建一个pool对象, 初始化一些变量

<ul>
<li>idleTimeoutMillis: 一个连接空闲时间最大值, 如果设置为30000, 那么一个连接空闲30000ms 后会自动关闭, 默认 30000ms</li>
<li>reapIntervalMillis:  每<code>reapIntervalMillis</code>检查空闲并移除, 默认1000ms</li>
<li>max: 连接池存在的最大连接数, 例子里设置为10</li>
<li>min: 连接池存在的最小连接数, 例子里默认为0(备注: 这里有个疑问，当我将min设为1, 从mongodb log 中可以看到 在空闲时间 连接是每隔<code>idleTimeoutMillis</code>关闭并新建连接, 问题是为什么不保持一个连接而要不停的关闭新建, 如果这样不如)</li>
<li>log: 可以自定义node-pool, 例子直接设为true 默认用node-pool提供的log</li>
<li>create: 应该创建一个item(db) 被 <code>acquired</code>, 然后调用其创建的 item 作为参数</li>
<li>destory: 在items毁之前,关闭所有资源使用的item(db)</li>
</ul>
</li>
<li>ensureMinimum, 确保有最小连接数</li>
<li> 例子中如果给min赋一个大于0的值, 2, 那么就 createResource()两次</li>
<li> 因为例子默认为0 跳过</li>
<li>至此已经建立pool, 下一步等待<code>acquired</code>, 资源准备就续, 就等消费了</li>
<li><code>curl http://127.0.0.1:8080</code></li>
<li><code>acquire(callback, priority)</code>

<ul>
<li>waitingClients.enqueue(callback, priority): 将回调根据priority推入队列</li>
<li>dispense(): 由单词意思可知分配资源， 施行; 试着拿一个客户端工作， 清除空闲的item. 如果有等待的client, shift(), call its callback. 如果没有等待的client, 创建一个; 如果创建一个client将超过max, 把客户端加入等待list!代码见 <a href="#dispense">dispense</a></li>
</ul>
</li>
<li> dispense() 结束,此时 waitingClients.size() = 0, availableObjects.length = 0</li>
<li>release(): 如果client不再需要，将之返回pool, 代码见<a href="#release">release</a></li>
<li><p>removeIdle(): check and removes the available clients that have timed out. 见<a href="#removeIdle">removeIdle</a></p></li>
<li><p>me.destroy(): client to be destroyed.见<a href="#destroy">destroy</a></p></li>
</ol>


<p><a name="dispense" id="despense"><strong>dispense</strong></a>
```javascript</p>

<pre><code>function dispense() {
    var obj = null, 
    objWithTimeout = null,
    err = null,
    clientCb = null,
    waitingCount = waitingClients.size();
    log("...");
    if (waitingCount &gt; 0) { //此时waitingCount = 1
        while(availableObjects.length &gt; 0) {
            log("...");    
            objWithTimeout = avaiableObjects[0];
            if (!factory.validate(objWithTimeout.obj)) {
                me.destroy(objWithTimeout.obj);     
                continue;
            } // 这一步验证对象
            avaiableObjects.shift(); // LIFO
            clientCb = waitingClients.dequeue(); // dequeue
            return clientCb(err, objWithTimeout.obj); // callback
        }     
        if (count &lt; factory.max) {
                createResource();
        }
    }
}
</code></pre>

<p>```</p>

<p><a name="release" id="release"><strong>release</strong></a>
```javascript
me.release = function(obj) {</p>

<pre><code>// 确保对象已经被释放
if (availableObjects.some(function(objWithTimeout) {
    return (objWithTimeout.obj === obj); 
    })) {
    log("release called twice for the same resource")
    return;
}     
var objWithTimeout = { obj: obj, timeout: (new Date().getTime() + idleTimeoutMillis) };
availableObjects.push(objWithTimeout); // 此时 availableObjects.size()=1
log("timeout:..");
dispense();  
scheduleRemoveIdle(); // 计划移走idle items(空闲项目) 延迟1000ms 执行 removeIdle
</code></pre>

<p>}
```</p>

<p><a name="removeIdle" id="removeIdle"><strong>removeIdle</strong></a>
```javascript
 function removeIdle(){</p>

<pre><code>var toRemove = [],
    now = new Date().getTime(),
    i,
    al, tr,
    timeout;
removeIdleScheduled = false;
// go through the available(idle) items, check if they have timed out;
for (i=0, al=availableObjects.length; i&lt; al &amp;&amp;
    (refreshIdle) || (count - factory.min &gt; toRemove.length));i+=1
    ){
    timeout = availableObjects[i].timeout; 
    if (now &gt;= timeout) {
       //client timed out, so destroy it 
       toRemove.push(availableObjects[i].obj);
        }
    }
    for (i=0, tr=toRemove.length; i&lt;tr; i+=1) {
        me.destroy(toRemove[i]);     
    }
    al = availableObjects.length;
    if (al &gt; 0) {
       log(".."); 
       scheduleRemoveIdle();
    } else {
        log("removeIdle() all objects removed", 'verbose');     
    }
 }
</code></pre>

<p>```</p>

<p><a name="destroy" id="destroy"><strong>destroy</strong></a>
```javascript
 me.destroy = function(obj) {</p>

<pre><code>count -= 1; 
availableOjbects = availableObjects.filter(function(objWithTimeout) {
   return (objWithTimeout.obj != obj) 
    });//过滤掉return true 的对象
factory.destroy(obj);
ensureMinimum();
 }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
